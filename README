NAME
       Net::BPF - Perl interface to reading or writing bpf

SYNOPSIS
       use Net::BPF qw(:all);

         my $bpf = Net::BPF->new(
           interface => "wm0",
           promisc => 1,
           hdrcmplt => 1,
         ) or die "Cannot construct bpf - $@\n";

         # arp filter
         $bpf->filter(
           BPF_STMT(BPF_LD + BPF_H + BPF_ABS, 12),
           BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, 0x0806, 0, 1),
           BPF_STMT(BPF_RET + BPF_K, -1),
           BPF_STMT(BPF_RET + BPF_K, 0),
         );

         while (1) {
           my $packet = $bpf->receive();
           next unless (defined $packet);  # when read-timeout

           my ($ether_dst, $ether_src, $ether_type, $ether_data) = unpack("H12H12H4H*", $packet);
           print "ETHER HEADER: $ether_type: $ether_src -> $ether_dst\n";
           printf "DATA[%5d]:  ", length($data) / 2;
           print $ether_data, "\n";
         }

DESCRIPTION
       Net::BPF module provides a raw interface to BPF(4)

CONSTRUCTOR
   $bpf = Net::BPF->new( %args )
       Create a new "Net::BPF" object.  The recognised arguments are:

       interface => STRING
               specify name of interface.

       buffersize => INT
               sets the buffer length for reads on bpf files.

       promisc => BOOL
               enables or disables "promiscuous mode".

       immediate => BOOL
               enables or disables "immediate mode".

       hdrcmplt => BOOL
               sets the status of the "header complete" flag.

       capture => BOOL
               if "capture" is true, bpf will be opened readonly.  if
               "capture" is false (default), bpf is readable and writable, and
               it is able to send packet.
METHODS
       $bpf->filter(ARRAY)
           sets the bpf_program.

             $bpf->filter(
               BPF_STMT(BPF_LD + BPF_H + BPF_ABS, 12),
               BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, 0x0806, 0, 1),
               BPF_STMT(BPF_RET + BPF_K, -1),
               BPF_STMT(BPF_RET + BPF_K, 0),
             );

       $bpf->send(STRING)
           send a packet.

             $bpf->send(pack("C*", 0x01 .. 0xff));

       $bpf->receive();
           receive a packet.

             my $packet = $bpf->receive();

       $bpf->interface(STRING)
           specify name of interface

       $bpf->promiscuous(BOOL)
           enables or disables "promiscuous mode".

       $bpf->setf(STRING)
           much the same of $bpf->filter, but setf() treat raw scalar of
           "struct bpf_program".

       $bpf->flush()
           flushes the buffer of incoming packets, and resets the statistics
           that are returned by "stats()".

       $bpf->blen([INT])
           sets or gets the buffer length for reads on bpf files.

       $bpf->dlt([INT])
           set or gets the type of the data link layer underlying the attached
           interface

       $bpf->rtimeout([INT])
           sets or gets the read timeout parameter.  you can set timeout 250
           milliseconds this way:

             $bpf->rtimeout(0.25);

       $bpf->stats()
           return array of statistics.

             my ($receive_counter, $drop_counter, $capture_counter) = $bpf->stats().

           $capture_counter is available on only NetBSD.

       $bpf->version()
           return the major and minor version number of the filter language
           currently recognized by the kernel.

             my ($major, $minor) = $bpf->version();

       $bpf->immediate([BOOL])
           Enables or disables "immediate mode".

       $bpf->buffersize([INT])
           sets or gets the buffer length for reads on bpf files.

       $bpf->hdrcmplt([BOOL])
           sets or gets the status of the "header complete" flag.

       $bpf->seesent([BOOL])
           enables or disables "see sent" flag.

       $bpf->feedback([BOOL])
           sets or gets the status of the "packet feedback mode" flag.

FUNCTIONS
       BPF_STMT(code, k)
           return bpf_insn. see also BPF(4).

       BPF_JUMP(code, k, jt, jf)
           return bpf_insn. see also BPF(4).

       BPF_WORDALIGN(len)
           return aligned length.

       pack_bpf_insn(code, k, jt, jf)
           return the binary pack of struct bpf_insn.

       unpack_bpf_hdr($rawdata)
           unpack bpf raw-data from sysread().  unpack_bpf_hdr() return ARRAY
           contains 5 values.

             my ($sec, $usec, $caplen, $datalen, $hdrlen) = unpack_bpf_hdr($rawdata);

           usually, you can use $bpf->receive(), and you need not to use
           "unpack_bpf_hdr()".

EXPORT
       BPF_LD BPF_LDX BPF_ST BPF_STX BPF_ALU BPF_JMP BPF_RET BPF_MISC
       BPF_W BPF_H BPF_B
       BPF_IMM BPF_ABS BPF_IND BPF_MEM BPF_LEN BPF_MSH
       BPF_ADD BPF_SUB BPF_MUL BPF_DIV BPF_OR BPF_AND BPF_LSH BPF_RSH BPF_NEG
       BPF_JA BPF_JEQ BPF_JGT BPF_JGE BPF_JSET
       BPF_K BPF_X BPF_A
       BPF_TAX BPF_TXA
       BPF_ALIGNMENT BPF_MAXINSNS BPF_DFLTBUFSIZE BPF_MAXBUFSIZE
       BPF_MINBUFSIZE

SEE ALSO
       bpf(4)

AUTHOR
       Ryo Shimizu <ryo@nerv.org>

COPYRIGHT AND LICENSE
       Copyright (C) 2008 by Ryo Shimizu.  All rights reserved.  This library
       is free software; you can redistribute it and/or modify it under the
       same terms as Perl itself.

